# Strat: Recharging tranches
#
# High level idea is that the strategy offers a firm price for batches of tokens.
# Each batch is called a "tranche".
#
# Every time a batch of tokens fully clears a new price further from the previous
# trades is offered for the next tranche.
#
# For example, if 1000 BLUE was available in a tranche to buy RED at
# 1 BLUE per RED and this fully cleared, the next tranche might be to buy up to
# 1000 BLUE at 0.9 BLUE per RED, then 0.8, etc. etc.
#
# Tranches slowly recharge over time passively when no trades are happening against
# the current price offer. For example, the strategy might recharge 1 tranche per
# day, so if the last trade left 500 BLUE remaining in a 1000 BLUE tranche at
# 0.9 BLUE per RED then after 24 hours the strategy will be offering 500 BLUE
# at 1 BLUE per RED. I.e. 0.5 tranches were recharged at 0.9 ratio and then
# another 0.5 tranches were recharged at 1 ratio. After another 12 hours
# there will be 1000 BLUE on offer at 1 ratio, etc.
#
# Almost everything about the strat is bindable and chartable, e.g.
# - The algorithms that determine the price and amount of each tranche
# - The recharge rate and delay before the passive recharge starts to kick in
# - Whether the amounts per tranche are denominated in the input or output token
# - Whether the strategy is buying or selling TKN
# - An optional conversion between the input/output token and some external
#   price, e.g. converting WETH in a vault to USD equivalent.


tokens:
  flare-red:
    network: flare
    address: 0xE38D92733203E6f93C634304b777490e67Dc4Bdf
  flare-blue:
    network: flare
    address: 0x40D44abeC30288BFcd400200BA65FBD05daA5321
  base-red:
    network: base
    address: 0x222789334D44bB5b2364939477E15A6c981Ca165
  base-blue:
    network: base
    address: 0x6d3AbB80c3CBAe0f60ba274F36137298D8571Fbe

orders:
  flare-buy:
    orderbook: flare
    inputs:
      - token: flare-red
    outputs:
      - token: flare-blue

  flare-sell:
    orderbook: flare
    inputs:
      - token: flare-blue
    outputs:
      - token: flare-red

  base-buy:
    orderbook: base
    inputs:
      - token: base-red
    outputs:
      - token: base-blue

  base-sell:
    orderbook: base
    inputs:
      - token: base-blue
    outputs:
      - token: base-red

scenarios:
    flare-red-blue-tranches:
        network: flare
        deployer: flare
        orderbook: flare
        bindings:
          # The uniswap words are only required if there is a conversion between
          # the input/output token and some external price. Typically this is
          # not the case as the io-ratio is defined in terms of the input/output
          # token and the io-ratio-multiplier is set to the identity function.
          uniswap-words: 0xAFF83Dd453f9EE510d6F623d09322A68E8ee29A3

          # Uniswap v3 factory contract address and corresponding init code hash.
          # If the factory address and the init code aren't available as a literals
          # then non-literal address and hash value can be given as bindings.
          uniswap-v3-factory: '[uniswap-v3-factory]'
          uniswap-v3-init-code: '[uniswap-v3-init-code]'

          orderbook-subparser: 0xFc6836F666C737AB7E6f3Bf72A27Dc0dd126c334

          # How far we move through tranche space in a second.
          # 1e18 is a whole tranche, so we divide 1 by the number of seconds
          # per recharge to calculate the per-second rate.
          # Examples:
          # 172800 seconds in 2 days, 48 hours = 1 / 172800 = 0.000005787037037037
          # 86400 seconds in 1 day, 24 hours = 1 / 86400 = 0.000011574074074074
          # 43200 seconds in 12 hours, 12 hours = 1 / 43200 = 0.000023148148148148
          # 3600 seconds in 1 hour, 1 hour = 1 / 3600 = 0.000277777777777777
          tranche-space-per-second: 0.000011574074074074

          # After any trade happens we pause before recharging.
          # Delay is to observe market feedback to the previous trade, e.g. to
          # potentially offer the next tranche at a different price for some time
          # before recharging back to the previous price.
          # Too long and people could grief to stop recharging.
          # Too quick and it will be difficult to move between tranches.
          # The default here is 5 minutes (units are seconds) and probably never
          # needs to be changed.
          tranche-space-recharge-delay: 300

          # When a tranche is completely cleared, the next tranche MAY be jumped
          # into partially. For example, if tranches are 90% shy (i.e. 0.9) then
          # if a tranche is cleared completely then the next tranche will be
          # started at 10% of its maximum size. This means that the capital
          # requirements for the strategy to reprice itself as the market moves
          # are reduced.
          # This MUST be set to a value less than 1e18, else it will entirely
          # skip tranches.
          # Shyness MAY be set to 0, in which case every tranche will be fully
          # available as it is entered.
          # tranche-space-shyness: 0

          # Minimum trade size, if you put in a trade for less than x% of a
          # tranche it wont clear.
          # Mitigates people pinging strat for dust orders to stop recharging.
          min-tranche-space-diff: 0.1

          # Snap to the nearest tranche to avoid dust issues at the edges, either
          # due to rounding in the evm or potentially malicious trades.
          # 0.01 is 1%
          tranche-space-snap-threshold: 0.01

          # This is only relevant if the tranche size/ratio is denominated in
          # some token other than the input/output tokens. For example, if the
          # TKN was being traded for WETH but the tranche size was denominated in
          # USD then the reference-stable would be USD and the reference-reserve
          # would be WETH, and the identity multiplier needs to be swapped out
          # for e.g. a TWAP USDT based multiplier.
          # Typically this is NOT needed as the tranche size and ratio ARE
          # denominated in the input/output tokens.
          io-ratio-multiplier: '''io-ratio-multiplier-identity'

        scenarios:
          buy:
            bindings:
                # If we want to denominate the amount in BLUE when we're
                # buying RED with it, then the amount is the OUTPUT.
                amount-is-output: 1
                io-ratio-expr: '''linear-growth'
                io-ratio-base: 1
                io-ratio-growth: 0.05
                tranche-size-expr: '''exponential-growth'
                tranche-size-base: 1
                tranche-size-growth: 0.01
            scenarios:
              initialized:
                bindings:
                  # This needs to be set upon going live.
                  # Generate a chart and compare to current market prices, if
                  # the market is within the chart then set this to the closest
                  # tranche that won't immediately dump into the market.
                  # If the market is outside the chart then set this to 0.
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
                  test-shy-tranche:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0.9
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20
                    test-last-update-time: 0
                    test-now: 0
          sell:
            bindings:
                # If we want to denominate the amount in BLUE when we're
                # selling RED for it, then the amount is the INPUT.
                amount-is-output: 0
                io-ratio-expr: '''linear-growth'
                io-ratio-base: 10
                io-ratio-growth: 0.5
                tranche-size-expr: '''exponential-growth'
                tranche-size-base: 1
                tranche-size-growth: 0.01
            scenarios:
              initialized:
                bindings:
                  # This needs to be set upon going live.
                  # Generate a chart and compare to current market prices, if
                  # the market is within the chart then set this to the closest
                  # tranche that won't immediately dump into the market.
                  # If the market is outside the chart then set this to 0.
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                runs: 10000
                bindings:
                  get-last-tranche: '''get-last-tranche-test'
                  set-last-tranche: '''set-last-tranche-test'
                  plottables: '''plottables-test'
                  max-test-tranche-space: 20
                  test-last-update-time: 0
                  test-now: 0

    base-red-blue-tranches:
            network: base
            deployer: base
            orderbook: base
            bindings:
              # The uniswap words are only required if there is a conversion between
              # the input/output token and some external price. Typically this is
              # not the case as the io-ratio is defined in terms of the input/output
              # token and the io-ratio-multiplier is set to the identity function.
              uniswap-words: 0x3bD3A7F1A9045701C5085aD4cA5d945686f7a73b

              # Uniswap v3 factory contract address and corresponding init code hash.
              # If the factory address and the init code aren't available as a literals
              # then non-literal address and hash value can be given as bindings.
              uniswap-v3-factory: '[uniswap-v3-factory]'
              uniswap-v3-init-code: '[uniswap-v3-init-code]'

              orderbook-subparser: 0x5CeEe9F4F49C106D5Bc049C8D649C332E6d365ad

              # How far we move through tranche space in a second.
              # 1e18 is a whole tranche, so we divide 1 by the number of seconds
              # per recharge to calculate the per-second rate.
              # Examples:
              # 172800 seconds in 2 days, 48 hours = 1 / 172800 = 0.000005787037037037
              # 86400 seconds in 1 day, 24 hours = 1 / 86400 = 0.000011574074074074
              # 43200 seconds in 12 hours, 12 hours = 1 / 43200 = 0.000023148148148148
              # 3600 seconds in 1 hour, 1 hour = 1 / 3600 = 0.000277777777777777
              tranche-space-per-second: 0.000011574074074074

              # After any trade happens we pause before recharging.
              # Delay is to observe market feedback to the previous trade, e.g. to
              # potentially offer the next tranche at a different price for some time
              # before recharging back to the previous price.
              # Too long and people could grief to stop recharging.
              # Too quick and it will be difficult to move between tranches.
              # The default here is 5 minutes (units are seconds) and probably never
              # needs to be changed.
              tranche-space-recharge-delay: 300

              # When a tranche is completely cleared, the next tranche MAY be jumped
              # into partially. For example, if tranches are 90% shy (i.e. 0.9) then
              # if a tranche is cleared completely then the next tranche will be
              # started at 10% of its maximum size. This means that the capital
              # requirements for the strategy to reprice itself as the market moves
              # are reduced.
              # This MUST be set to a value less than 1e18, else it will entirely
              # skip tranches.
              # Shyness MAY be set to 0, in which case every tranche will be fully
              # available as it is entered.
              # tranche-space-shyness: 0

              # Minimum trade size, if you put in a trade for less than x% of a
              # tranche it wont clear.
              # Mitigates people pinging strat for dust orders to stop recharging.
              min-tranche-space-diff: 0.1

              # Snap to the nearest tranche to avoid dust issues at the edges, either
              # due to rounding in the evm or potentially malicious trades.
              # 0.01 is 1%
              tranche-space-snap-threshold: 0.01

              # This is only relevant if the tranche size/ratio is denominated in
              # some token other than the input/output tokens. For example, if the
              # TKN was being traded for WETH but the tranche size was denominated in
              # USD then the reference-stable would be USD and the reference-reserve
              # would be WETH, and the identity multiplier needs to be swapped out
              # for e.g. a TWAP USDT based multiplier.
              # Typically this is NOT needed as the tranche size and ratio ARE
              # denominated in the input/output tokens.
              io-ratio-multiplier: '''io-ratio-multiplier-identity'

            scenarios:
              buy:
                bindings:
                    # If we want to denominate the amount in BLUE when we're
                    # buying RED with it, then the amount is the OUTPUT.
                    amount-is-output: 1
                    io-ratio-expr: '''linear-growth'
                    io-ratio-base: 1
                    io-ratio-growth: 0.05
                    tranche-size-expr: '''exponential-growth'
                    tranche-size-base: 1
                    tranche-size-growth: 0.01
                scenarios:
                  initialized:
                    bindings:
                      # This needs to be set upon going live.
                      # Generate a chart and compare to current market prices, if
                      # the market is within the chart then set this to the closest
                      # tranche that won't immediately dump into the market.
                      # If the market is outside the chart then set this to 0.
                      initial-tranche-space: 0
                    scenarios:
                      prod:
                        bindings:
                          get-last-tranche: '''get-last-tranche-prod'
                          set-last-tranche: '''set-last-tranche-prod'
                          plottables: '''plottables-prod'
                          tranche-space-shyness: 0
                      test:
                        runs: 100
                        bindings:
                          get-last-tranche: '''get-last-tranche-test-init'
                          set-last-tranche: '''set-last-tranche-test'
                          plottables: '''plottables-test'
                          test-last-update-time: 0
                          test-now: 0
                      test-shy-tranche:
                        bindings:
                          get-last-tranche: '''get-last-tranche-prod'
                          set-last-tranche: '''set-last-tranche-prod'
                          plottables: '''plottables-prod'
                          tranche-space-shyness: 0.9
                  test:
                      runs: 10000
                      bindings:
                        get-last-tranche: '''get-last-tranche-test'
                        set-last-tranche: '''set-last-tranche-test'
                        plottables: '''plottables-test'
                        max-test-tranche-space: 20
                        test-last-update-time: 0
                        test-now: 0
              sell:
                bindings:
                    # If we want to denominate the amount in BLUE when we're
                    # selling RED for it, then the amount is the INPUT.
                    amount-is-output: 0
                    io-ratio-expr: '''linear-growth'
                    io-ratio-base: 10
                    io-ratio-growth: 0.5
                    tranche-size-expr: '''exponential-growth'
                    tranche-size-base: 1
                    tranche-size-growth: 0.01
                scenarios:
                  initialized:
                    bindings:
                      # This needs to be set upon going live.
                      # Generate a chart and compare to current market prices, if
                      # the market is within the chart then set this to the closest
                      # tranche that won't immediately dump into the market.
                      # If the market is outside the chart then set this to 0.
                      initial-tranche-space: 0
                    scenarios:
                      prod:
                        bindings:
                          get-last-tranche: '''get-last-tranche-prod'
                          set-last-tranche: '''set-last-tranche-prod'
                          plottables: '''plottables-prod'
                          tranche-space-shyness: 0
                      test:
                        runs: 100
                        bindings:
                          get-last-tranche: '''get-last-tranche-test-init'
                          set-last-tranche: '''set-last-tranche-test'
                          plottables: '''plottables-test'
                          test-last-update-time: 0
                          test-now: 0
                  test:
                    runs: 10000
                    bindings:
                      get-last-tranche: '''get-last-tranche-test'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      max-test-tranche-space: 20
                      test-last-update-time: 0
                      test-now: 0

charts:
    flare-buy-initial-deployment:
      scenario: flare-red-blue-tranches.buy.initialized.test
      metrics:
        - label: Initial BLUE sold
          value: 0.6
          description: 'Amount of BLUE sold to buy RED in the first tranche (stack item 0.6)'             
        - label: Initial RED bought
          value: 0.5.2
          description: 'Amount of RED purchased in the first tranche (stack item 0.5.2)'                             
        - label: Initial io-ratio
          value: 0.7
          description: '# RED purchased per BLUE spent (stack item 0.7)'        
        - label: Starting tranche
          value: 0.2.0
          description: 'This strategy starts executing buys at the initial tranche (stack item 0.2.0)'          
        - label: Initial buy price
          value: 0.5.3
          precision: 4
          unit-suffix: " BLUE"             
          description: 'Price you pay for 1 RED in BLUE, visible on dextools (stack item 0.5.3)'     
      plots:

    flare-buy-simulation:
      scenario: flare-red-blue-tranches.buy.test
      plots:    
        USDT sold per tranche:     
          x:
              label: 'Tranche space'
          y:
              label: 'USDT spent'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.6  
        RED bought per tranche:    
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.2
        'io-ratio per tranche':
          subtitle: 'Ratio of RED bought per 1 USDT sold per tranche'        
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought per 1 USDT'            
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7
        buy price by tranche:
          subtitle: 'Price paid for 1 RED in USDT, visible on dextools as RED/USDT pair'        
          x:
              label: 'Tranche space'
          y:
              label: '1 RED priced in USDT'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.3      

    flare-sell-initial-deployment:
      scenario: flare-red-blue-tranches.sell.initialized.test
      metrics:
        - label: Initial RED sold
          value: 0.6
          description: 'Amount of RED sold for BLUE in the first tranche (stack item 0.6)'             
        - label: Initial BLUE bought
          value: 0.5.2
          description: 'Amount of BLUE purchased by selling RED in the first tranche (stack item 0.5.2)'                             
        - label: Initial io-ratio
          value: 0.7
          description: '# BLUE purchased per RED spent (stack item 0.7)'        
        - label: Starting tranche
          value: 0.2.0
          description: 'This strategy starts executing sells at the initial tranche (stack item 0.2.0)'          
        - label: Initial sell price
          value: 0.7
          precision: 4
          unit-suffix: "BLUE"        
          description: 'Price you pay for 1 RED in BLUE, visible on dextools (stack item 0.7)'     
      plots:

    flare-sell-simulation:
      scenario: flare-red-blue-tranches.sell.test
      plots:
        RED sold per tranche:     
          x:
              label: 'Tranche space'
          y:
              label: 'RED spent'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.6  
        BLUE bought per tranche:    
          x:
              label: 'Tranche space'
          y:
              label: 'BLUE bought'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.2
        'io-ratio per tranche':
          subtitle: 'Ratio of BLUE bought per 1 RED sold per tranche'        
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought per 1 BLUE'            
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7
        sell price by tranche:
          subtitle: 'Price paid for 1 RED in BLUE, visible on dextools as RED/BLUE pair'        
          x:
              label: 'Tranche space'
          y:
              label: '1 RED priced in BLUE'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7    

    base-buy-initial-deployment:
      scenario: base-red-blue-tranches.buy.initialized.test
      metrics:
        - label: Initial BLUE sold
          value: 0.6
          description: 'Amount of BLUE sold to buy RED in the first tranche (stack item 0.6)'             
        - label: Initial RED bought
          value: 0.5.2
          description: 'Amount of RED purchased in the first tranche (stack item 0.5.2)'                             
        - label: Initial io-ratio
          value: 0.7
          description: '# RED purchased per BLUE spent (stack item 0.7)'        
        - label: Starting tranche
          value: 0.2.0
          description: 'This strategy starts executing buys at the initial tranche (stack item 0.2.0)'          
        - label: Initial buy price
          value: 0.5.3
          precision: 4
          unit-suffix: " BLUE"             
          description: 'Price you pay for 1 RED in BLUE, visible on dextools (stack item 0.5.3)'     
      plots:

    base-buy-simulation:
      scenario: base-red-blue-tranches.buy.test
      plots:    
        USDT sold per tranche:     
          x:
              label: 'Tranche space'
          y:
              label: 'USDT spent'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.6  
        RED bought per tranche:    
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.2
        'io-ratio per tranche':
          subtitle: 'Ratio of RED bought per 1 USDT sold per tranche'        
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought per 1 USDT'            
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7
        buy price by tranche:
          subtitle: 'Price paid for 1 RED in USDT, visible on dextools as RED/USDT pair'        
          x:
              label: 'Tranche space'
          y:
              label: '1 RED priced in USDT'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.3      

    base-sell-initial-deployment:
      scenario: base-red-blue-tranches.sell.initialized.test
      metrics:
        - label: Initial RED sold
          value: 0.6
          description: 'Amount of RED sold for BLUE in the first tranche (stack item 0.6)'             
        - label: Initial BLUE bought
          value: 0.5.2
          description: 'Amount of BLUE purchased by selling RED in the first tranche (stack item 0.5.2)'                             
        - label: Initial io-ratio
          value: 0.7
          description: '# BLUE purchased per RED spent (stack item 0.7)'        
        - label: Starting tranche
          value: 0.2.0
          description: 'This strategy starts executing sells at the initial tranche (stack item 0.2.0)'          
        - label: Initial sell price
          value: 0.7
          precision: 4
          unit-suffix: "BLUE"        
          description: 'Price you pay for 1 RED in BLUE, visible on dextools (stack item 0.7)'     
      plots:

    base-sell-simulation:
      scenario: base-red-blue-tranches.sell.test
      plots:
        RED sold per tranche:     
          x:
              label: 'Tranche space'
          y:
              label: 'RED spent'
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.6  
        BLUE bought per tranche:    
          x:
              label: 'Tranche space'
          y:
              label: 'BLUE bought'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.5.2
        'io-ratio per tranche':
          subtitle: 'Ratio of BLUE bought per 1 RED sold per tranche'        
          x:
              label: 'Tranche space'
          y:
              label: 'RED bought per 1 BLUE'            
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7
        sell price by tranche:
          subtitle: 'Price paid for 1 RED in BLUE, visible on dextools as RED/BLUE pair'        
          x:
              label: 'Tranche space'
          y:
              label: '1 RED priced in BLUE'          
          marks:
            - type: line
              options:
                x: 0.0
                y: 0.7    


deployments:
  flare-test-shyness:
    scenario: flare-red-blue-tranches.buy.initialized.test-shy-tranche
    order: flare-buy
  flare-buy:
    scenario: flare-red-blue-tranches.buy.initialized.prod
    order: flare-buy
  flare-sell:
    scenario: flare-red-blue-tranches.sell.initialized.prod
    order: flare-sell
  base-buy:
    scenario: base-red-blue-tranches.buy.initialized.prod
    order: base-buy
  base-sell:
    scenario: base-red-blue-tranches.sell.initialized.prod
    order: base-sell

---
#tranche-space-per-second !The amount of tranche space that is recharged per second.
#tranche-space-recharge-delay !The duration in seconds that no recharging occurs after a trade occurs.

#tranche-size-expr !The binding to get the tranche size for the current tranche space.
#tranche-size-base !Base tranche size is the size of the smallest tranche, denominated in output token.
#tranche-size-growth !The exponential growth factor of the size of each tranche. E.g. 0.01 is 1% output amount growth per tranche.

#io-ratio-expr !The binding to get the IO ratio for the current tranche space.
#io-ratio-base !The base IO ratio, as a decimal 18 fixed point number. This is the IO ratio at tranche space 0 and grows according to the growth factor per tranche.
#io-ratio-growth !The exponential growth factor of the IO ratio. E.g. 0.01 is 1% io-ratio growth per tranche.

#reference-stable !The stable token that is used as a reference for the TWAP to offer dollar equivalent conversions.
#reference-stable-decimals !The number of decimals of the reference stable token.
#reference-reserve !The token that will be used to compare against the reference stable token to calculate the TWAP for dollar equivalent conversions.
#reference-reserve-decimals !The number of decimals of the reserve token.
#twap-duration !The duration in seconds of the TWAP window for dollar equivalence conversions.
#twap-fee !The uniswap fee tier to use for the TWAP.

#min-tranche-space-diff !The minimum tranche space difference that is allowed per trade. Prevents dusting the strat to stop it recharging.
#tranche-space-snap-threshold !The threshold in tranche space to snap to the nearest tranche to avoid dust issues at the edges.

#initial-tranche-space !The initial tranche space when the order is first deployed.
#get-last-tranche !The binding to get the last tranche space and update time.
#set-last-tranche !The binding to set the last tranche space and update time.

#test-tranche-space-before !Returned by get-test-last-tranche to allow the tranche space before to be bound for testing.
#test-last-update-time !Returned by get-test-last-tranche to allow the last update time to be bound for testing.
#test-now !Returned by get-test-last-tranche to allow the current time to be bound for testing.

#io-ratio-multiplier !The binding to get the IO ratio multiplier.

#amount-is-output !Whether the amount is an output or input amount. Non-zero means output (i.e. normal orderbook behaviour), zero means input.

#init-key "init"
#tranche-space-key "tranche-space"
#update-time-key "update-time"

#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#uniswap-v3-factory !Uniswap v3 factory address.
#uniswap-v3-init-code !Uniswap v3 init code hash.
#orderbook-subparser !The subparser for the Orderbook

#plottables-test
  amount
  io-ratio:,
  input-amount: mul(amount io-ratio),
  effective-price: inv(io-ratio);

#plottables-prod
  amount
  io-ratio:;

#get-last-tranche-prod
  is-initialized: get(hash(order-hash() init-key)),
  tranche-space-before: if(
    is-initialized
    get(hash(order-hash() tranche-space-key))
    initial-tranche-space
  ),
  last-update-time: if(
    is-initialized
    get(hash(order-hash() update-time-key))
    now()
  ),
  current-time: now();

#tranche-space-shyness !The shyness of the liquidity in tranches. E.g. 0.9 is 90% shy.
#set-last-tranche-prod
  tranche-space current-time:,
  shy-tranche-space: if(
    is-zero(frac(tranche-space))
    add(tranche-space tranche-space-shyness)
    tranche-space),
  :set(hash(order-hash() init-key) 1),
  :set(hash(order-hash() tranche-space-key) shy-tranche-space),
  :set(hash(order-hash() update-time-key) current-time);

/* Forward the bindings through as is to the caller. */
#max-test-tranche-space !The maximum tranche space that will appear on the test chart.
#get-last-tranche-test
  tranche-space-before: mod(test-tranche-space-before max-test-tranche-space),
  last-update-time: test-last-update-time,
  current-time: test-now;
#get-last-tranche-test-init
  tranche-space-before: initial-tranche-space,
  last-update-time: test-last-update-time,
  current-time: test-now;
/* There's nothing to set if we're just rebinding in tests. */
#set-last-tranche-test
  tranche-space current-time:;

#exponential-growth
  base rate t:,
  _: exponential-growth(base rate t);

#linear-growth
  base rate t:,
  _: linear-growth(base rate t);

#constant-growth
  base _ _:,
  _: base;

#calculate-tranche
  tranche-space-before
  last-update-time
  current-time: call<'get-last-tranche>(),
  recharge-duration: saturating-sub(current-time add(last-update-time tranche-space-recharge-delay)),
  recharged-tranche-space: mul(recharge-duration tranche-space-per-second),
  /* repeat current-time for easy access by callers */
  _: current-time,
  tranche-space-now: saturating-sub(tranche-space-before recharged-tranche-space),
  tranche-space-available: headroom(tranche-space-now),
  tranche-total-size: call<'tranche-size-expr>(tranche-size-base tranche-size-growth floor(tranche-space-now));

#io-ratio-multiplier-sell
  multiplier: uniswap-v3-twap-output-ratio(reference-stable reference-reserve twap-duration 0 uniswap-v3-factory uniswap-v3-init-code twap-fee);

#io-ratio-multiplier-buy
  multiplier: uniswap-v3-twap-output-ratio(reference-reserve reference-stable  twap-duration 0 uniswap-v3-factory uniswap-v3-init-code twap-fee);

#io-ratio-multiplier-identity
  multiplier: 1;

#calculate-io
  using-words-from uniswap-words orderbook-subparser
  tranche-space-now  tranche-space-available
  tranche-total-size: call<'calculate-tranche>(),
  tranche-io-ratio: call<'io-ratio-expr>(io-ratio-base io-ratio-growth floor(tranche-space-now)),
  final-io-ratio: mul(tranche-io-ratio call<'io-ratio-multiplier>()),
  amount-available: mul(tranche-total-size tranche-space-available),
  amount: if(amount-is-output amount-available div(amount-available final-io-ratio)),
  io-ratio: final-io-ratio,
  :call<'plottables>(amount io-ratio);

#handle-io
  current-time
  tranche-space-before
  _
  tranche-total-size: call<'calculate-tranche>(),
  tranche-amount-diff: if(
    amount-is-output
    output-vault-decrease()
    input-vault-increase()
  ),
  tranche-space-diff: div(tranche-amount-diff tranche-total-size),
  tranche-space-after: add(tranche-space-before tranche-space-diff),
  /* Snap tranche space to the nearest tranche to avoid dust issues at the edges */
  tranche-space-after-snapped: snap-to-unit(tranche-space-snap-threshold tranche-space-after),
  :ensure(
    greater-than-or-equal-to(tranche-space-after-snapped add(tranche-space-before min-tranche-space-diff))
    "Minimum trade size not met."
  ),
  :call<'set-last-tranche>(tranche-space-after-snapped current-time);

#post-add-order
 :;