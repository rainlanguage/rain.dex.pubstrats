// SPDX-License-Identifier: CAL
pragma solidity >=0.6.0;

import {Script} from "forge-std/Script.sol"; // put the path to forge-std/Script.sol

contract DiagOrder is Script {
    function run() external {

        vm.createSelectFork("https://rpc.ankr.com/base");
        vm.rollFork(19467476);
        address from = 0x7a73A10cdF5A0016C014fe23dEC0cbfa85eD7e1d;
        address to = 0x3cC2ebbfc66cE846AFE6949248d0a54d1F903A25; // put arb contract address
        bytes memory data = hex"7ea0b76a000000000000000000000000d2938e7c9fe3597f78832ce780feb61945c377d700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c60000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002190d6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000b40000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000000000000000000007c172bd11a77532ca4e29006d755ad72c5781a0500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008e026e188c3bab2f8e20b032a66264d9d9d22973b3d50c513f831f42edf7417bf07000000000000000000000000fa4989f5d49197fd9673ce4b7fe2a045a0f2f9c8000000000000000000000000783b82f0fbf6743882072ae2393b108f5938898b000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006d700000000000000000000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000c7d713b49da0000000000000000000000000000000000000000000000000000016345785d8a00009b4d696e696d756d2074726164652073697a65206e6f74206d65742e0000000000000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000124bc0ddd92e560000000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000000000088696f2d726174696f00000000000000000000000000000000000000000000008d6c6173742d696f2d726174696f000000000000000000000000000000000000000000000000000000000000000000000000000000000081feef66d9fab80000976c6173742d74726164652d6f75747075742d746f6b656e0000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029138f6c6173742d74726164652d74696d65000000000000000000000000000000008d7472616e6368652d7370616365000000000000000000000000000000000000000000000000000000000000000000000000000000000001a055690d9db8000000000000000000000000000000000000000000000000000000000000000004370f000000740100015801a401e801fc020c0238023c025c02bc03d403f004101c0b00090b3000020b1000040b1000031b12000001100001011000002b120000001000033d1200000010000001100002001000040b13000500100001001000023d12000000100005001000062e120000001000060b1000062213000000100005001000080b01000700100008001000070b020008220c00090b40000203100403031004040b1000062213000000100003001000042e12000000100005001000002b1200000010000601100003451200000010000701100004001000072b120000001000073311000023110000221300000110000601100005001000002b12000000100007211200001d0200000b00000900100005001000080b02000a0b00000b150b00090b10000c0b20000d01100007001000022b120000001000014812000101100008001000032e12000000100004001000004812000100100005321100000010000535110000001000060110000a011000090b13000e120500030110000b0310000403100003031000010c140000491100000110000b0310000303100004031000010c1400004911000018100000001000011b12000036110000001000001b120000100500020110000d0110000c031000010c120000491100001b1200000010000036110000001000000110000e031000010c12000049110000031000041e12000022130000040603040010000200100001001000002613000003020001031000040110000f1e1200000a040101031000040110000e031000010c1200004a020000001000000110000c031000010c1200004a02000000020202070500001a100000011000100310000403100003031000010c1400004a02000017090204011000110310000303100004031000010c1400004911000000100001001000024812000100100000011000110310000403100003031000010c1400004a02000000100003011000110310000303100004031000010c1400004a02000045120010031000030310000303100004031000010c140000001000004911000003100403001000013b12000000100002001000014712000000100003001000004a020000031000040310000403100003031000010c1400000110000b0310000403100003031000010c1400000010000449110000001000054911000000100007001000063d12000000100002031004034712000000100009001000082b12000003100102001000092e1200000010000b001000062b120000181000000010000c1b1200000010000a2e1200000010000c1f120000031001020010000d1b120000011000122e120000011000120b100006221300000010000e0010000c3b1200000010000f001000044a0200000010000d001000054a02000006040001011000110310000403100003031000010c14000049110000070500021a100000011000100310000403100003031000010c1400004911000001040304001000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000006dfe8977ed71a1f6a0418850feb29d5fe9314168d68d24b50914687449fc29f0700000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012dfe8977ed71a1f6a0418850feb29d5fe9314168d68d24b50914687449fc29f070000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000006dfe8977ed71a1f6a0418850feb29d5fe9314168d68d24b50914687449fc29f0700000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012dfe8977ed71a1f6a0418850feb29d5fe9314168d68d24b50914687449fc29f07000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004202833589fcd6edb6e08f4c7c32d4f71b54bda0291301ffff01482fe995c4a52bc79271ab29a53591363ee30a89003cc2ebbfc66ce846afe6949248d0a54d1f903a25000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000fa4989f5d49197fd9673ce4b7fe2a045a0f2f9c8000000000000000000000000783b82f0fbf6743882072ae2393b108f5938898b000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        vm.prank(from);
        (bool success, bytes memory result) = to.call(data);
        (success, result);
    }
}